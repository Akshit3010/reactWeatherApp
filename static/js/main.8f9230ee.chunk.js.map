{"version":3,"sources":["DateAndTime.jsx","Weather.jsx","App.js","index.js"],"names":["DateAndTime","time","Date","toLocaleTimeString","useState","ctime","setCtime","currentTime","weekday","Array","day","getDay","now","month","getMonth","date","getDate","setInterval","Weather","city","setCity","search","setSearch","icon","setIcon","desc","setDesc","abortController","AbortController","signal","fetchApi","a","url","fetch","response","json","resjson","console","log","weatherMain","weather","main","description","abort","weatherIcon","Thunderstorm","Drizzle","Rain","Snow","Haze","Clear","Clouds","error","className","type","placeholder","onChange","e","target","value","onClick","name","sys","country","temp","feels_like","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8f9230ee.chunk.js","sourcesContent":["import React ,{useState} from \"react\";\r\n\r\nconst DateAndTime =()=>{\r\n    let time=new Date().toLocaleTimeString();\r\n    \r\n    const [ctime , setCtime] = useState(time);\r\n\r\n    let currentTime= new Date();\r\n    var weekday = new Array(7);\r\n     weekday[0] = \"Sunday\";\r\n    weekday[1] = \"Monday\"; \r\n     weekday[2] = \"Tuesday\";\r\n    weekday[3] = \"Wednesday\";\r\n    weekday[4] = \"Thursday\";\r\n   weekday[5] = \"Friday\";\r\n    weekday[6] = \"Saturday\";\r\n    \r\n    let day=weekday[currentTime.getDay()];\r\n\r\n    let months=[\r\n        \"Jan\",\r\n        \"Feb\",\r\n        \"Mar\",\r\n        \"Apr\",\r\n        \"May\",\r\n        \"Jun\",\r\n        \"Jul\",\r\n        \"Aug\",\r\n        \"Sep\",\r\n        \"Oct\",\r\n        \"Nov\",\r\n        \"Dec\"\r\n    ];\r\n\r\n    let now = new Date();\r\n    let month = months[now.getMonth()];\r\n    let date=now.getDate();\r\n\r\n   \r\n\r\n\r\n    setInterval(() => {\r\n        time=new Date().toLocaleTimeString();\r\n        setCtime(time); \r\n    }, 1000);\r\n\r\n    return (\r\n        <>\r\n       {day} | {month} {date} | {ctime}\r\n       \r\n        </>\r\n    );\r\n}\r\nexport default DateAndTime;","import React ,{useState}from \"react\";\r\nimport DateAndTime from \"./DateAndTime\";\r\nimport './App.css';\r\n\r\nconst Weather=()=>{\r\n    const [city,setCity]= useState(\"\");\r\n    const [search,setSearch]= useState(\"\");\r\n    const [icon , setIcon] = useState(\"\");\r\n    const [desc,setDesc] = useState(\"\");\r\n    //abortcontroller for aborting the fetch request to prevent memory leak\r\n    const abortController= new AbortController();\r\n    const signal= abortController.signal \r\n\r\n    //<=====Function for weather API========>\r\n     const fetchApi= async ()=>{\r\n        try {\r\n            const url=`https://api.openweathermap.org/data/2.5/weather?q=${search}&units=metric&appid=bd8184da268988bea575aff8abcbdf3b`\r\n            const response = await fetch(url,{signal});\r\n            const resjson= await response.json();\r\n            setCity(resjson);\r\n            console.log(resjson);\r\n            \r\n            //Fetching the weather desc. for icons\r\n            let weatherMain= resjson.weather[0].main;\r\n          let description =resjson.weather[0].description;\r\n            setDesc(description);\r\n            abortController.abort();\r\n            //Creating icon classes object\r\n            let weatherIcon={\r\n                Thunderstorm:\"wi wi-thunderstorm\",\r\n                Drizzle:\"wi wi-sleet\",\r\n                Rain:\"wi wi-storm-showers\",\r\n                Snow:\"wi wi-snow\",\r\n                Haze:\"wi wi-fog\",\r\n                Clear:\"wi wi-day-sunny\",\r\n                Clouds:\"wi wi-day-fog\"\r\n              }\r\n              \r\n\r\n              //Matching the values of Weather Desc.\r\n              if(weatherMain === \"Thunderstorm\"){\r\n                  setIcon(weatherIcon.Thunderstorm);\r\n                 } else if(weatherMain === \"Drizzle\"){\r\n                setIcon(weatherIcon.Drizzle);\r\n                 } else if(weatherMain === \"Rain\"){\r\n                setIcon(weatherIcon.Rain);\r\n                 } else if(weatherMain === \"Snow\"){\r\n                setIcon(weatherIcon.Snow);\r\n                 } else if(weatherMain === \"Haze\" || weatherMain === \"Mist\" || weatherMain === \"Dust\" || weatherMain === \"Smoke\" || weatherMain === \"Fog\" || weatherMain === \"Sand\" || weatherMain === \"Ash\" || weatherMain === \"Tornado\"){\r\n                setIcon(weatherIcon.Haze);\r\n                 } else if(weatherMain === \"Clear\"){\r\n                setIcon(weatherIcon.Clear);\r\n                 } else if(weatherMain === \"Clouds\"){\r\n                setIcon(weatherIcon.Clouds);\r\n                 }\r\n          \r\n        } catch (error) {\r\n          console.error(error);\r\n          \r\n            }          \r\n     };\r\n        \r\n\r\n    return (\r\n        <>\r\n        <div className=\"container\">\r\n            <div className=\"box\">\r\n                <div className=\"inputData\">\r\n                    <input type=\"search\" \r\n                    className=\"inputField\"\r\n                    placeholder=\"search any city...\"\r\n                    onChange={(e)=>{\r\n                    setSearch(e.target.value);\r\n                    }\r\n                    }\r\n                    value={search}    \r\n                    />\r\n                    <i className=\"fas fa-search\" onClick={()=>{\r\n                        fetchApi();\r\n                    }}></i>\r\n                </div>\r\n            \r\n                 {/* Using Ternary operator */}\r\n                {!city.name ? (\r\n                <p className=\"error\">Make sure you write the  name correctly</p>\r\n                ) : (\r\n                 <>\r\n                    <h5 className=\"head\">\r\n                        <i className={icon}/>\r\n                    </h5>\r\n                    <p className=\"desc\">{desc}</p>\r\n                    <div className=\"main\">\r\n                        <h2 className=\"location\"><i className=\"fas fa-location-arrow\"></i> {search},{city.sys.country}</h2>\r\n                        <h1 className=\"temp\">{city.main.temp}°C</h1>\r\n                        <h3 className=\"min_max\">Feels Like : {city.main.feels_like}°C </h3>\r\n                        <h3 className=\"time\"><DateAndTime/></h3>\r\n                    </div>\r\n                    \r\n                 </>\r\n                 )}\r\n           \r\n            </div>\r\n        </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Weather;","import React from \"react\";\nimport \"../node_modules/weather-icons/css/weather-icons.min.css\";\n\nimport Weather from \"./Weather\";\n\nfunction App() {\n  return (\n    <>\n    <Weather />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n      <App />\n  ,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}